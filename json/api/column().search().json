{"dt-api":{"summary":"Search for data in the selected column.","description":"While `dt-api search()` provides the ability to search globally across the table, this method, and its plural counterpart, provide the ability to search for data on a specific column.\r\n\r\n\t\tDataTables does not have any column search controls built-in as there are so many different ways that column specific data could be searched, but this method makes adding custom column search controls super easy. The examples below show how it may be used.\r\n\r\n\t\tNote that this search ability in DataTables is actually technically a filter since it is subtractive. However, we term is a search to avoid naming overlap with the `dt-api filter` helper method.\r\n\r\n\t\tPlease be aware that this method sets the search to apply to the table only - it does not actually perform the search. In order to have the search performed and the result shown, use the `dt-api draw()` method, which can be called simply as a chained method of the `dt-api column().search()` method's returned object - for example `table.column( [0, 1] ).search( 'Fred' ).draw();`. This is to provide the ability to queue multiple changes before performing a draw.","name":"column().search()","example":[{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\n// #column3_search is a <input type=\"text\"> element\r\n$('#column3_search').on( 'keyup', function () {\r\n\ttable\r\n\t\t.columns( 3 )\r\n\t\t.search( this.value )\r\n\t\t.draw();\r\n} );\r\n","title":"Individual column search"},{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable.columns( '.select-filter' ).every( function () {\r\n\tvar that = this;\r\n\r\n\t// Create the select list and search operation\r\n\tvar select = $('<select />')\r\n\t\t.appendTo(\r\n\t\t\tthis.footer()\r\n\t\t)\r\n\t\t.on( 'change', function () {\r\n\t\t\tthat\r\n\t\t\t\t.search( $(this).val() )\r\n\t\t\t\t.draw();\r\n\t\t} );\r\n\r\n\t// Get the search data for the first column and add to the select list\r\n\tthis\r\n\t\t.cache( 'search' )\r\n\t\t.sort()\r\n\t\t.unique()\r\n\t\t.each( function ( d ) {\r\n\t\t\tselect.append( $('<option value=\"'+d+'\">'+d+'<\/option>') );\r\n\t\t} );\r\n} );\r\n\r\n","title":"Build a search for each column with a `select-filter` class."}],"since":"1.10","type":[{"description":"Get the currently applied column search.","returns":{"content":"Search term that is currently applied to the column. This will be an empty string if no search search term is applied.","type":"string"},"type":"function","signature":"column().search()"},{"parameter":[{"content":"Search string to apply to the selected column.","name":"input","type":"string"},{"content":"Treat as a regular expression (`true`) or not (default, `false`).","default":false,"name":"regex","type":"boolean"},{"content":"Perform smart search (default, `true`) or not (`false`). Note that to perform a \"smart\" search, DataTables uses regular expressions, so if you pass a regular expression in as the second parameter to this method, you will likely want to disable smart searching so the two different regular expressions don't conflict.","default":true,"name":"smart","type":"boolean"},{"content":"Do case-insensitive matching (default, `true`) or not (`false`).","default":true,"name":"caseInsen","type":"boolean"}],"description":"Set the search term for the column from the selector. Note this doesn't actually perform the search, but rather queues it up - use `dt-api draw()` to perform the search and display the result.","returns":{"content":"DataTables API instance","type":"DataTables.Api"},"type":"function","signature":"column().search( input [, regex[ , smart[ , caseInsen ]]] )"}],"group":"columns","related":[{"content":"searching","type":"option"},{"content":"columns.searchable","type":"option"},{"content":"search()","type":"api"},{"content":"columns().search()","type":"api"},{"content":"$.fn.dataTable.util.escapeRegex()","type":"api"}]}}
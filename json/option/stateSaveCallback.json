{"dt-option":{"summary":"Callback that defines how the table state is stored and where.","description":"DataTables can save the state of the table (paging, filtering etc) when the `dt-init stateSave` option is enabled, and by default it will use HTML5's `localStorage` to save the state into. This callback method allows you to change where the state is saved (for example you might wish to use a server-side database or cookies).\r\n\r\n\t\tThe data given to the function is an object which has the following structure:\r\n\r\n\t\t```js\r\n\t\t{\r\n\t\t\t\"time\":   {number}               // Time stamp of when the object was created\r\n\t\t\t\"start\":  {number}               // Display start point\r\n\t\t\t\"length\": {number}               // Page length\r\n\t\t\t\"order\":  {array}                // 2D array of column ordering information (see `order` option)\r\n\t\t\t\"search\": {\r\n\t\t\t\t\"search\":          {string}  // Search term\r\n\t\t\t\t\"regex\":           {boolean} // Indicate if the search term should be treated as regex or not\r\n\t\t\t\t\"smart\":           {boolean} // Flag to enable DataTables smart search\r\n\t\t\t\t\"caseInsensitive\": {boolean} // Case insensitive flag\r\n\t\t\t},\r\n\t\t\t\"columns\" [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"visible\": {boolean}     // Column visibility\r\n\t\t\t\t\t\"search\":  {}            // Object containing column search information. Same structure as `search` above\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t\t```\r\n\r\n\t\tNote that additional extensions can add extra information to this structure, or you may use `dt-init stateSaveParams` or `dt-event stateSaveParams` to add your own parameters. Also the information stored is type sensitive - that is, the data type of the data given by DataTables must be preserved. For example the `start` parameter must be a `-type number` data type.\r\n\r\n\t\tThis method is required only to store the data given to it. The `dt-init stateSaveParams` method is used to manipulate the data that is to actually be saved.\r\n\r\n\t\tThis callback works hand-in-hand with `dt-init stateLoadCallback`. This method saves the state while `dt-init stateSaveCallback` will load it from where this callback has saved it.","name":"stateSaveCallback","example":{"content":"\r\n$('#example').dataTable( {\r\n  \"stateSave\": true,\r\n  \"stateSaveCallback\": function (settings, data) {\r\n    // Send an Ajax request to the server with the state object\r\n    $.ajax( {\r\n      \"url\": \"/state_save\",\r\n      \"data\": data,\r\n      \"dataType\": \"json\",\r\n      \"type\": \"POST\",\r\n      \"success\": function () {}\r\n    } );\r\n  }\r\n} );\r\n","title":"Save state on a server with Ajax"},"since":"1.10","type":{"scope":"HTML table element","parameter":[{"content":"DataTables settings object","name":"settings","type":"DataTables.Settings"},{"content":"Data to save. The data comes from `dt-init stateSaveParams`","name":"data","type":"object"}],"type":"function","signature":"stateSaveCallback( settings, data )"},"group":"callback","related":[{"content":"state()","type":"api"},{"content":"state.clear()","type":"api"},{"content":"state.loaded()","type":"api"},{"content":"state.save()","type":"api"},{"content":"stateSave","type":"option"},{"content":"stateLoadParams","type":"option"},{"content":"stateLoaded","type":"option"},{"content":"stateLoadCallback","type":"option"},{"content":"stateSaveParams","type":"option"},{"content":"stateLoaded","type":"event"},{"content":"stateLoadParams","type":"event"},{"content":"stateSaveParams","type":"event"}]}}
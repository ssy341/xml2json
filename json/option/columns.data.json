{"dt-option":{"summary":"Set the data source for the column from the rows data object / array","default":"Takes the index value of the column automatically","description":"\r\n\t\tThis property can be used to read and write data to and from any data source property, including deeply nested objects / properties. `data` can be given in a number of different ways which effect its behaviour as documented below.\r\n\r\n\t\tThe data that is resolved to for a data point (between this option and `dt-init columns.render`) to will be used by DataTables for the requested data, with three special cases:\r\n\r\n\t\t* `-type undefined` - the `dt-init columns.defaultContent` value will be used. If there is no default content specified, an error will be given.\r\n\t\t* `-type null` - If `dt-init columns.render` is used, the data passed to the rendering function will be the original data source for the row. If there is no renderer the `dt-init columns.defaultContent` value will be used. If there is no default content specified, for display data an empty sting will be used. `-type null` will be used for all other data types.\r\n\t\t* `-type function` - the function will be executed and the returned value used. As of DataTables <span class=\"since\">1.10.1<\/span> the function will be executed in the same scope as the data object for the row. The result of this is that an object instance can be used as the data source for a row.\r\n\r\n\t\tNote that `data` is both a getter and setter option. If you just require formatting of data for output, you will likely want to use `dt-init columns.render` which is simply a getter and thus much simpler to use!\r\n\r\n\t\tAs of DataTables 1.10.3 this option can be used with a DOM sourced data to instruct DataTables where to write the data read for each column to in a data source object. By default DataTables will store the data in an array, but using this option you can provide object property names which describe the structure of the object to use ([example](/examples/advanced_init/object_dom_read.html)).\r\n\t\t","name":"columns.data","example":[{"content":"\r\n// JSON structure for each row in this example:\r\n//   {\r\n//      \"engine\": {value},\r\n//      \"browser\": {value},\r\n//      \"platform\": {value},\r\n//      \"version\": {value},\r\n//      \"grade\": {value}\r\n//   }\r\n$('#example').dataTable( {\r\n  \"ajaxSource\": \"sources/objects.txt\",\r\n  \"columns\": [\r\n    { \"data\": \"engine\" },\r\n    { \"data\": \"browser\" },\r\n    { \"data\": \"platform\" },\r\n    { \"data\": \"version\" },\r\n    { \"data\": \"grade\" }\r\n  ]\r\n} );\r\n","title":"Read table data from objects"},{"content":"\r\n// JSON structure for each row:\r\n//   {\r\n//      \"engine\": {value},\r\n//      \"browser\": {value},\r\n//      \"platform\": {\r\n//         \"inner\": {value}\r\n//      },\r\n//      \"details\": [\r\n//         {value}, {value}\r\n//      ]\r\n//   }\r\n$('#example').dataTable( {\r\n  \"ajaxSource\": \"sources/deep.txt\",\r\n  \"columns\": [\r\n    { \"data\": \"engine\" },\r\n    { \"data\": \"browser\" },\r\n    { \"data\": \"platform.inner\" },\r\n    { \"data\": \"platform.details.0\" },\r\n    { \"data\": \"platform.details.1\" }\r\n  ]\r\n} );\r\n","title":"Read information from deeply nested objects"},{"content":"\r\n$(document).ready(function() {\r\n\t$('#example').DataTable({\r\n\t\t\"columns\": [\r\n\t\t\t{ \"data\": \"name\" },\r\n\t\t\t{ \"data\": \"position\" },\r\n\t\t\t{ \"data\": \"office\" },\r\n\t\t\t{ \"data\": \"age\" },\r\n\t\t\t{ \"data\": \"start_date\" },\r\n\t\t\t{ \"data\": \"salary\" }\r\n\t\t]\r\n\t});\r\n} );\r\n","title":"Read a DOM sourced table into data objects"},{"content":"\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": 0,\r\n    \"data\": function ( row, type, val, meta ) {\r\n      if (type === 'set') {\r\n        row.price = val;\r\n        // Store the computed display and filter values for efficiency\r\n        row.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n        row.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n        return;\r\n      }\r\n      else if (type === 'display') {\r\n        return row.price_display;\r\n      }\r\n      else if (type === 'filter') {\r\n        return row.price_filter;\r\n      }\r\n      // 'sort', 'type' and undefined all just use the integer\r\n      return row.price;\r\n    }\r\n  } ]\r\n} );\r\n","title":"Using `data` as a function to provide different information for sorting, filtering and display. In this case, currency (price)"},{"content":"\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": [ 0 ],\r\n    \"data\": null,\r\n    \"defaultContent\": \"Click to edit\"\r\n  } ]\r\n} );\r\n","title":"Using default content"},{"content":"\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": [ 0 ],\r\n    \"data\": \"name[, ]\"\r\n  } ]\r\n} );\r\n","title":"Using array notation - outputting a list from an array"}],"since":"1.10","type":[{"description":"Treated as an array index for the data source. This is the default that DataTables uses (incrementally increased for each column).","type":"integer"},{"description":"Read and write an object property to and from the data source. There are three 'special' options that can be used in the string to alter how DataTables reads the data from the source object:\r\n\r\n\t\t\t* `.` - Dotted Javascript notation. Just as you use a `.` in Javascript to read from nested objects, so to can the options specified in `data`. For example: `browser.version` or `browser.name`. If your object parameter name contains a period, use `\\\\` to escape it - i.e. `first\\\\.name`.\r\n\t\t\t* `[]` - Array notation. DataTables can automatically combine data from and array source, joining the data with the characters provided between the two brackets. For example: `name[, ]` would provide a comma-space separated list from the source array. If no characters are provided between the brackets, the original array source is returned.\r\n\t\t\t* `()` - Function notation. Adding `()` to the end of a parameter will execute a function of the name given. For example: `browser()` for a simple function on the data source, `browser.version()` for a function in a nested property or even `browser().version` to get an object property if the function called returns an object. Note that function notation is recommended for use in `render` rather than `data` as it is much simpler to use as a renderer.","type":"string"},{"description":"Use the original data source for the row rather than plucking data directly from it. This action has effects on two other initialisation options:\r\n\t\t\t\r\n\t\t\t* `dt-init columns.defaultContent` - When null is given as the `data` option and `defaultContent` is specified for the column, the value defined by `defaultContent` will be used for the cell.\r\n\t\t\t* `dt-init columns.render` - When null is used for the `data` option and the `render` option is specified for the column, the whole data source for the row is used for the renderer.","type":null},{"description":"Use different data for the different data types requested by DataTables (`string filter`, `string display`, `string type` or `string sort`). The property names of the object is the data type the property refers to and the value can defined using an integer, string or function using the same rules as `dt-init columns.data` normally does. Note that an `string _` option _must_ be specified. This is the default value to use if you haven't specified a value for the data type requested by DataTables.\r\n\r\n\t\t\tAs an example you might use:\r\n\r\n\t\t\t```js\r\n\t\t\t\"data\": {\r\n\t\t\t\t\"_\": \"phone\",\r\n\t\t\t\t\"filter\": \"phone_filter\",\r\n\t\t\t\t\"display\": \"phone_display\"\r\n\t\t\t}\r\n\t\t\t```","type":"object"},{"scope":"HTML table element","parameter":[{"content":"The data for the whole row","name":"row","type":"array|object"},{"content":"The data type requested for the cell","name":"type","type":"string"},{"content":"Value to set if the `type` parameter is `-string set`. Otherwise, `-type undefined`.","name":"set","type":"*"},{"content":"An object that contains additional information about the cell being requested. This object contains the following properties:\r\n\r\n\t\t\t* `row` - The row index for the requested cell. See `dt-api row().index()`.\r\n\t\t\t* `col` - The column index for the requested cell. See `dt-api column().index()`.\r\n\t\t\t* `settings` - The `dt-type DataTables.Settings` object for the table in question. This can be used to obtain an API instance if required.","name":"meta","since":"1.10.1","type":"object"}],"description":"The function given will be executed whenever DataTables needs to set or get the data for a cell in the column.\r\n\r\n\t\t\tThis function might be called multiple times, as DataTables will call it for the different data types that it needs - sorting, filtering and display.\r\n\r\n\t\t\tPlease note that DataTables will call the function as a _setter_ when a new row is added only when the row's data is read from the DOM (i.e. the table is initialised on a pre-populated HTML table). The function is not called as setter when the data is source from Javascript or Ajax under the assumption that the data is already in the format required.","returns":"The return value from the function is not required when 'set' is the type of call, but otherwise the return is what will be used for the data requested.","type":"function","signature":"data( row, type, set, meta )"}],"group":"columns","related":{"content":"columns.render","type":"option"}}}
{"dt-option":{"summary":"State loaded - data manipulation callback","description":"Callback which allows modification of the saved state prior to loading that state. This callback is called when the table is loading state from the stored data, but prior to the settings object being modified by the saved state.\r\n\r\n\t\tNote that the `dt-init stateLoadCallback` option is used to define where and how to load the state, while this function is used to manipulate the data once it has been retrieved from storage.\r\n\r\n\t\tFurther note that for plug-in authors, you should use the `dt-event stateLoadParams` event to load parameters for a plug-in.","name":"stateLoadParams","example":[{"content":"\r\n$('#example').dataTable( {\r\n  \"stateSave\": true,\r\n  \"stateLoadParams\": function (settings, data) {\r\n    data.search.search = \"\";\r\n  }\r\n} );\r\n","title":"Remove a saved filter, so saved filtering is never loaded"},{"content":"\r\n$('#example').dataTable( {\r\n  \"stateSave\": true,\r\n  \"stateLoadParams\": function (settings, data) {\r\n    return false;\r\n  }\r\n} );\r\n","title":"Disallow state loading by returning false"}],"since":"1.10","type":{"scope":"HTML table element","parameter":[{"content":"DataTables settings object","name":"settings","type":"DataTables.Settings"},{"content":"Data to save. The data comes from `dt-init stateSaveParams`","name":"data","type":"object"}],"type":"function","signature":"stateLoadParams( settings, data )"},"group":"callback","related":[{"content":"state()","type":"api"},{"content":"state.clear()","type":"api"},{"content":"state.loaded()","type":"api"},{"content":"state.save()","type":"api"},{"content":"stateSave","type":"option"},{"content":"stateSaveCallback","type":"option"},{"content":"stateLoaded","type":"option"},{"content":"stateLoadCallback","type":"option"},{"content":"stateSaveParams","type":"option"},{"content":"stateLoaded","type":"event"},{"content":"stateLoadParams","type":"event"},{"content":"stateSaveParams","type":"event"}]}}
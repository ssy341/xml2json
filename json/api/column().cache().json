{"dt-api":{"summary":"Get the DataTables cached data for the selected column.","description":"DataTables caches data for searching and ordering in order for those operations to run as quickly as possible when they are required. Sometimes it can be useful to get the data that DataTables has cached for these operations, for example when creating a `select` list to provide a column based filter.\r\n\r\n\t\tCached data is not guaranteed to be available at any particular moment. If DataTables hasn't requested the data, it won't have been cached. This is particularly obvious when using the `-string order` option and a sort hasn't been performed on a column. Invalidation of data will also cause the cache to be removed.\r\n\r\n\t\tIt should be noted that this method is required as DataTables has the ability to use different data for its different operations (searching, ordering, display etc) - see `dt-init columns.data` and `dt-init columns.render` for further information. `dt-api columns().data()` provides access to the original data. If you aren't using orthogonal data for the different operations of DataTables, then this method is of limited used.\r\n\r\n\t\tPlease note that the order of the data in the returned array and which rows the data is obtained from (searched rows, visible rows etc) is controlled by the `dt-type selector-modifier` option of the `dt-api column()` selector used to get the selected column.\r\n\r\n\t\tAdditionally, if the selector used in `dt-api column()` matches more than one column, the result set will be truncated to a single column - the first one in the result set.\r\n\r\n\t\tNote that this method is primarily aimed at plug-in developers who require access to the internal data that DataTables has stored.","name":"column().cache()","example":{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\n// Create the select list and search operation\r\nvar select = $('<select />')\r\n\t.appendTo(\r\n\t\ttable.column( 0 ).footer()\r\n\t)\r\n\t.on( 'change', function () {\r\n\t\ttable\r\n\t\t\t.column( 0 )\r\n\t\t\t.search( $(this).val() )\r\n\t\t\t.draw();\r\n\t} );\r\n\r\n// Get the search data for the first column and add to the select list\r\ntable\r\n\t.column( 0 )\r\n\t.cache( 'search' )\r\n\t.sort()\r\n\t.unique()\r\n\t.each( function ( d ) {\r\n\t\tselect.append( $('<option value=\"'+d+'\">'+d+'<\/option>') );\r\n\t} );\r\n\r\n","title":"Create a `select` which will search the table when used by the end user, on the first column of the table."},"since":"1.10","type":{"parameter":{"content":"Specify which cache the data should be read from. Can take one of two values: `dt-string search` or `dt-string order`","name":"type","type":"string"},"description":"Obtain the data for the column from the selector","returns":{"content":"DataTables API instance with data for each cell in the selected column in the result set. This is a 1D array with each entry being the data for the cells from the selected column.","type":"DataTables.Api"},"type":"function","signature":"column().cache( type )"},"group":"columns","related":{"content":"columns().cache()","type":"api"}}}
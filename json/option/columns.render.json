{"dt-option":{"summary":"Render (process) the data for use in the table","description":"\r\n\t\t< ## General overview\r\n\t\t<\r\n\t\t< The documentation below is a technical reference (nitty-gritty details). For a more general overview of renderers in DataTables, including discussion of the built in renderers, please refer to the [DataTables manual on this topic](https://datatables.net/manual/data/renderers).\r\n\r\n\t\tThis property will modify the data that is used by DataTables for various operations as it is read from the data source. `dt-init columns.render` can be considered to be the the read only companion to `dt-init columns.data` which is read / write (and therefore more complex). Like `dt-init columns.data` this option can be given in a number of different ways to affect its behaviour as described below.\r\n\r\n\t\tThe data that is returned by the `dt-init columns.render` option (regardless of if it is used as a function, integer or string) is what DataTables will use for the requested data type (this is called the _resolved data_). DataTables ability to request different data for its different operations is referred to as [orthogonal data](//datatables.net/manual/orthogonal-data) and allows different forms of the same data to be used for different operations (for example, a date might be given formatted for an end user for display and search, but in an integer form for ordering).\r\n\r\n\t\tThere are three special values that `dt-init columns.render` can resolve to:\r\n\r\n\t\t* `-type undefined` - the `dt-init columns.defaultContent` value will be used. If there is no default content specified, an error will be given.\r\n\t\t* `-type null` - the `dt-init columns.defaultContent` value will be used. If there is no default content specified, for display data an empty sting will be used. `-type null` will be used for all other data types.\r\n\t\t* `-type function` - the function will be executed and the returned value used. As of DataTables <span class=\"since\">1.10.1<\/span> the function will be executed in the same scope as the data object for the row. The result of this is that an object instance can be used as the data source for a row. See the examples below for how to use an instance with DataTables.\r\n\r\n\r\n\t\t### Array access\r\n\r\n\t\tWhen used as a string (see below), this option can be used to obtain multiple data points from an array or access specifically just one element in an array. It is important to understand the difference between the two forms if you wish to access array based data inside a row's data object.\r\n\r\n\t\t* Use one or more properties from an array - use `[]` notation\r\n\t\t* Obtain a single element from the array only - use dotted notation - e.g. `.0` to access the first element in the array.\r\n\r\n\t\tConsider for example this data structure:\r\n\r\n\t\t```js\r\n\t\t\"access\": [\r\n\t\t  { \"id\": \"1\", \"name\": \"Printer\" },\r\n\t\t  { \"id\": \"3\", \"name\": \"Desktop\" },\r\n\t\t  { \"id\": \"4\", \"name\": \"VMs\" }\r\n\t\t]\r\n\t\t```\r\n\r\n\t\tTo display the `name` property from the objects in the array, in a single cell, use `access[, ].name` - this will concatenate the names separated by `, ` - e.g. in this case the result would be `-string Printer, Desktop, VMs`. \r\n\r\n\t\tTo access a single property from an array use `.{index}`. Using the above JSON again, to display just the first name from the access array use `access.0.name` - e.g. in this case the result would be `Printer`.\r\n\t\t","name":"columns.render","example":[{"content":"\r\n$('#example').dataTable( {\r\n  \"ajaxSource\": \"sources/deep.txt\",\r\n  \"columns\": [\r\n    { \"data\": \"engine\" },\r\n    { \"data\": \"browser\" },\r\n    {\r\n      \"data\": \"platform\",\r\n      \"render\": \"[, ].name\"\r\n    }\r\n  ]\r\n} );\r\n","title":"Create a comma separated list from an array of objects"},{"content":"\r\n// This would be used with a data source such as:\r\n//   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\", ... }\r\n// Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n// (which has both forms) is used for filtering for if a user inputs either format, while\r\n// the formatted phone number is the one that is shown in the table.\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": 0,\r\n    \"data\": null, // Use the full data source object for the renderer's source\r\n    \"render\": {\r\n      \"_\": \"phone\",\r\n      \"filter\": \"phone_filter\",\r\n      \"display\": \"phone_display\"\r\n    }\r\n  } ]\r\n} );\r\n","title":"As an object, extracting different data for the different types"},{"content":"\r\n// This would be used with a data source such as:\r\n//   \"phone\": { \"plain\": 5552368, \"filter\": \"5552368 555-2368\", \"display\": \"555-2368\" }\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": 0,\r\n    \"data\": 'phone',\r\n    \"render\": {\r\n      \"_\": \"plain\",\r\n      \"filter\": \"filter\",\r\n      \"display\": \"display\"\r\n    }\r\n  } ]\r\n} );\r\n","title":"As above, with the `phone` information as an object"},{"content":"\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": 0,\r\n    \"data\": \"download_link\",\r\n    \"render\": function ( data, type, full, meta ) {\r\n      return '<a href=\"'+data+'\">Download<\/a>';\r\n    }\r\n  } ]\r\n} );\r\n","title":"Use as a function to create a link from the data source"},{"content":"\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n    \"targets\": 4,\r\n    \"data\": \"description\",\r\n    \"render\": function ( data, type, full, meta ) {\r\n      return type === 'display' && data.length > 40 ?\r\n      \t'<span title=\"'+data+'\">'+data.substr( 0, 38 )+'...<\/span>' :\r\n      \tdata;\r\n    }\r\n  } ]\r\n} );\r\n","title":"Show ellipsis for long strings"},{"content":"\r\nfunction Person( name, age, position ) {\r\n\tthis._name     = name;\r\n\tthis._age      = age;\r\n\tthis._position = position;\r\n\r\n\tthis.name = function () {\r\n\t\treturn this._name;\r\n\t};\r\n\r\n\tthis.age = function () {\r\n\t\treturn this._age;\r\n\t};\r\n\r\n\tthis.position = function () {\r\n\t\treturn this._position;\r\n\t};\r\n}\r\n\r\n\r\n$(document).ready(function() {\r\n\tvar table = $('#example').DataTable({\r\n\t\tcolumns: [\r\n\t\t\t{ data: null, render: 'name' },\r\n\t\t\t{ data: null, render: 'age' },\r\n\t\t\t{ data: null, render: 'position' }\r\n\t\t]\r\n\t});\r\n\r\n\ttable.row.add( new Person( 'Airi Satou',     33, 'Accountant' ) );\r\n\ttable.row.add( new Person( 'Angelica Ramos', 47, 'Chief Executive Officer (CEO)' ) );\r\n\ttable.row.add( new Person( 'Ashton Cox',     66, 'Junior Technical Author' ) );\r\n\ttable.draw();\r\n} );\r\n","title":"Using an object instance as the data source for the row"}],"since":"1.10","type":[{"description":"Treated as an array index for the data source. This is the default that DataTables uses (incrementally increased for each column).","type":"integer"},{"description":"Read an object property from the data source. There are three 'special' options that can be used in the string to alter how DataTables reads the data from the source object:\r\n\r\n\t\t\t* `.` - Dotted Javascript notation. Just as you use a `.` in Javascript to read from nested objects, so you can use the options specified in `data`. For example: `browser.version` or `browser.name`. If your object parameter name contains a period, use `\\\\` to escape it - i.e. `first\\\\.name`.\r\n\t\t\t\r\n\t\t\t* `[]` - Array notation. DataTables can automatically combine data from an array source, joining the data with the characters provided between the two brackets. For example: `name[, ]` would provide a comma-space separated list from the source array. If no characters are provided between the brackets, the original array source is returned. See above for further information on array access.\r\n\r\n\t\t\t* `()` - Function notation. Adding `()` to the end of a parameter will execute a function of the name given. For example: `browser()` for a simple function on the data source, `browser.version()` for a function in a nested property or even `browser().version` to get an object property if the function called returns an object. Note that function notation is recommended for use in `dt-init columns.render` rather than `dt-init columns.data` as it is much simpler to use as a renderer.","type":"string"},{"description":"Use different data for the different data types requested by DataTables (`string filter`, `string display`, `string type` or `string sort`). The property names of the object is the data type the property refers to and the value can defined using an integer, string or function using the same rules as `dt-init columns.render` normally does.\r\n\r\n\t\t\tNote that an `string _` option can optionally be specified. This is the default value to use if you haven't specified a value for the data type requested by DataTables. If there is no option for the data type requested that the `string _` option has not been specified, the data pointed to by the `dt-init columns.data` option will be used.\r\n\r\n\t\t\tAs an example you might use:\r\n\r\n\t\t\t```js\r\n\t\t\t\"data\": \"phone\",\r\n\t\t\t\"render\": {\r\n\t\t\t\t\"_\": \"plain\",\r\n\t\t\t\t\"filter\": \"filter\",\r\n\t\t\t\t\"display\": \"display\"\r\n\t\t\t}\r\n\t\t\t```","type":"object"},{"scope":"HTML table element","parameter":[{"content":"The data for the cell (based on `dt-init columns.data`)","name":"data","type":"*"},{"content":"The type call data requested. This is used for [DataTables' orthogonal data support](https://datatables.net/manual/data/orthogonal-data). This value will be one of:\r\n\r\n\t\t\t* `-string filter`: Get the value that DataTables should use for filtering on this cell.\r\n\t\t\t* `-string display`: The value to display in the table.\r\n\t\t\t* `-string type`: Value to use for type detection. This should normally match the `-string sort` value - see [type detection plug-in documentation](https://www.datatables.net/manual/plug-ins/type-detection).\r\n\t\t\t* `-string sort`: Get the data to use for sorting on this cell - the value returned should typically be numeric or a string, but custom plug-ins can be used - [see the plug-in documentation](https://www.datatables.net/manual/plug-ins/sorting). Note that this value is `-string sort` for legacy reasons (rather than being `order` which would be more consistent with the rest of the API).\r\n\t\t\t* `-type undefined`: Get the original data for the cell (i.e. unmodified).\r\n\t\t\t* Custom value: It is possible for plug-ins such as Responsive (through its `-init responsive.orthogonal` option) and Buttons (`-api buttons.exportData()`) to request custom data types specified by the developer. This can be useful in cases where you want send certain data to a particular extension.\r\n\r\n\t\t\tSee also the `-api cell().render()` method which can be used to execute the given rendering method at any arbitrary time.","name":"type","type":"string"},{"content":"The full data source for the row (not based on `dt-init columns.data`)","name":"row","type":"*"},{"content":"An object that contains additional information about the cell being requested. This object contains the following properties:\r\n\r\n\t\t\t* `row` - The row index for the requested cell. See `dt-api row().index()`.\r\n\t\t\t* `col` - The column index for the requested cell. See `dt-api column().index()`.\r\n\t\t\t* `settings` - The `dt-type DataTables.Settings` object for the table in question. This can be used to obtain an API instance if required.","name":"meta","since":"1.10.1","type":"object"}],"description":"If a function is given, it will be executed whenever DataTables needs to get the data for a cell in the column. Note that this function might be called multiple times, as DataTables will call it for the different data types that it needs - sorting, filtering and display.","returns":"The return value from the function is what will be used for the data requested.","type":"function","signature":"render( data, type, row, meta )"}],"group":"columns","related":{"content":"columns.data","type":"option"}}}
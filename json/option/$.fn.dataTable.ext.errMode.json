{"dt-option":{"summary":"Set how DataTables will report detected errors","description":"If DataTables encounters an error that it \"knows about\" (invalid JSON for example), it can provide useful information that describes the error and how to address it.\r\n\r\n\t\tThe default error handling is intentionally obtrusive to let developers know that there is an issue while they are writing code that interfaces with DataTables. However, this is not always what you might wish to have on your page and this static option provides the ability to control how errors are reported.","name":"$.fn.dataTable.ext.errMode","example":{"content":"\r\n\r\n$.fn.dataTable.ext.errMode = 'throw';\r\n\r\n$('#example').dataTable( {\r\n  ajax: 'data.json'\r\n} );\r\n","title":"Have DataTables `throw` errors rather than `alert()` them."},"since":"1.10","type":[{"description":"Perform one of the built in error reporting actions:\r\n\r\n\t\t\t* `-string alert` (default) - Alert the error\r\n\t\t\t* `-string throw` - Throw a Javascript error\r\n\t\t\t* `-string none` - Do nothing (you would want to use this `dt-event error` in this case)","type":"string"},{"parameter":[{"content":"DataTables settings object (`dt-type DataTables.Settings`).","name":"settings","type":"DataTables.Settings"},{"content":"Technical note reference which contains detailed information about the error that has occured - this can be found at `https://datatables.net/tn/{techNote}`.","name":"techNote","type":"integer"},{"content":"Error message","name":"message","type":"string"}],"description":"As a function you may provide your own error handling, for example showing a message to the end user or reloading the page to recover from an error situation.","returns":{"content":"No return is excepted or acted upon.","type":"undefined"},"type":"function","signature":"$.fn.dataTable.ext.errMode( settings, techNote, message )"}],"group":"static","related":"dt-event error"}}
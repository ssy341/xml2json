{"dt-api":{"summary":"Search for data in the selected columns.","description":"While `dt-api search()` provides the ability to search globally across the table, this method, and its singular counterpart, provide the ability to search for data on specific columns.\r\n\r\n\t\tDataTables does not have any column search controls built-in as there are so many different ways that column specific data could be searched, but this method makes adding custom column search controls super easy. The examples below show how it may be used.\r\n\r\n\t\tDataTables has a built in search algorithm referred to as \"smart\" searching and is designed to make searching the table data, easy to use for the end user. The smart search is performed using a regular expression and thus must be considered if you are using a regular expression search (second parameter of this method). For a full description of smart searching in DataTables, please refer to the documentation for `dt-api search()`.\r\n\r\n\t\tNote that this search ability in DataTables is actually technically a filter since it is subtractive. However, we term is a search to avoid naming overlap with the `dt-api filter()` helper method.\r\n\r\n\t\tPlease be aware that this method sets the search to apply to the table only - it does not actually perform the search. In order to have the search performed and the result shown, use the `dt-api draw()` method, which can be called simply as a chained method of the `dt-api columns().search()` method's returned object - for example `table.columns( [0, 1] ).search( 'Fred' ).draw();`. This is to provide the ability to queue multiple changes before performing a draw.","name":"columns().search()","example":[{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable\r\n\t.columns( '.status' )\r\n\t.search( 'Important' )\r\n\t.draw();\r\n","title":"Apply a search to multiple columns"},{"content":"\r\n// Setup - add a text input to each footer cell\r\n$('#example tfoot th').each( function () {\r\n\tvar title = $('#example thead th').eq( $(this).index() ).text();\r\n\t$(this).html( '<input type=\"text\" placeholder=\"Search '+title+'\" />' );\r\n} );\r\n\r\n// DataTable\r\nvar table = $('#example').DataTable();\r\n\r\n// Apply the filter\r\ntable.columns().every( function () {\r\n\tvar column = this;\r\n\r\n\t$( 'input', this.footer() ).on( 'keyup change', function () {\r\n\t\tcolumn\r\n\t\t\t.search( this.value )\r\n\t\t\t.draw();\r\n\t} );\r\n} );\r\n\r\n","title":"Build a text `-tag input` search for each column. Note that this example performs partial word matching and smart searching."},{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable.columns( '.select-filter' ).every( function () {\r\n\tvar that = this;\r\n\r\n\t// Create the select list and search operation\r\n\tvar select = $('<select />')\r\n\t\t.appendTo(\r\n\t\t\tthis.footer()\r\n\t\t)\r\n\t\t.on( 'change', function () {\r\n\t\t\tthat\r\n\t\t\t\t.search( $(this).val() )\r\n\t\t\t\t.draw();\r\n\t\t} );\r\n\r\n\t// Get the search data for the first column and add to the select list\r\n\tthis\r\n\t\t.cache( 'search' )\r\n\t\t.sort()\r\n\t\t.unique()\r\n\t\t.each( function ( d ) {\r\n\t\t\tselect.append( $('<option value=\"'+d+'\">'+d+'<\/option>') );\r\n\t\t} );\r\n} );\r\n\r\n","title":"Build a search for each column with a `select-filter` class."}],"since":"1.10","type":[{"description":"Get the currently applied column search.","returns":{"content":"Api instance with the applied search terms for the selected columns in the result set.","type":"DataTables.Api"},"type":"function","signature":"columns().search()"},{"parameter":[{"content":"Search string to apply to the selected columns.","name":"input","type":"string"},{"content":"Treat as a regular expression (`true`) or not (default, `false`).","default":false,"name":"regex","type":"boolean"},{"content":"Perform smart search (default, `true`) or not (`false`). Please refer to `dt-api search()` for a full description of smart filtering.\r\n\r\n\t\t\tNote that to perform a smart search, DataTables uses regular expressions, so if enable regular expressions using the second parameter to this method, you will likely want to disable smart searching as the two regular expressions might otherwise conflict and cause unexpected results.","default":true,"name":"smart","type":"boolean"},{"content":"Do case-insensitive matching (default, `true`) or not (`false`).","default":true,"name":"caseInsen","type":"boolean"}],"description":"Set the search term for the columns from the selector. Note this doesn't actually perform the search, but rather queues it up - use `dt-api draw()` to perform the search and display the result.","returns":{"content":"DataTables API instance","type":"DataTables.Api"},"type":"function","signature":"columns().search( input [, regex[ , smart[ , caseInsen ]]] )"}],"group":"columns","related":[{"content":"searching","type":"option"},{"content":"columns.searchable","type":"option"},{"content":"search()","type":"api"},{"content":"column().search()","type":"api"},{"content":"$.fn.dataTable.util.escapeRegex()","type":"api"}]}}
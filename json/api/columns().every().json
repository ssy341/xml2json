{"dt-api":{"summary":"Iterate over each selected column, with the function context set to be the column in question.","description":"A typical operation with the DataTable API is to perform an operation on a collection of columns - a common action is performed on each column, adding event handlers, updating data, etc. This iteration of the columns can be performed a number of ways in DataTables, each with its own advantages:\r\n\r\n\t\t* `dt-api columns().every()`\r\n\t\t* `dt-api iterator()`\r\n\t\t* `dt-api each()`\r\n\r\n\t\tThis `dt-api columns().every()` method is likely to be the most useful in the majority of cases as it sets the context of the callback function to be the `dt-api column()` instance for the column in question (normally a callback in the DataTables API has its context set to be at the top level API hierarchy). In simple terms this means you have the methods such as `dt-api column().data()` available as `this.data()` in the callback given to this method.\r\n\r\n\t\tConsider the following example using `dt-api each()`, which iterates over the column indexes that have been selected - we are required to get the `dt-api column()` object for each column to be able to work with it directly:\r\n\r\n\t\t```js\r\n\t\ttable.columns().eq(0).each( function ( index ) {\r\n\t\t\tvar column = table.column( index );\r\n\r\n\t\t\tvar data = column.data();\r\n\t\t\t// ... do something with data(), or column.nodes(), etc\r\n\t\t} );\r\n\t\t```\r\n\r\n\t\tUsing `dt-api columns().every()` this can be rewritten as:\r\n\r\n\t\t```js\r\n\t\ttable.columns().every( function () {\r\n\t\t\tvar data = this.data();\r\n\t\t\t// ... do something with data(), or this.nodes(), etc\r\n\t\t} );\r\n\t\t```\r\n\r\n\t\tAlthough a relatively simple optimisation in terms of code presentation, it can make the code much more readable and intuitive.\r\n\r\n\t\tThe other advantage is that the table context is automatically handled - in the first example above where `dt-api each()` is used, the `dt-api eq()` method is used to select the information from the first table in the API's context only, introducing complexity if multiple tables are used. In `dt-api columns().every()` the table context is automatically set to the appropriate table for each column that has been selected.","name":"columns().every()","example":[{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable.columns().every( function () {\r\n\tvar that = this;\r\n\r\n\t$( 'input', this.footer() ).on( 'keyup change', function () {\r\n\t\tthat\r\n\t\t\t.search( this.value )\r\n\t\t\t.draw();\r\n\t} );\r\n} );\r\n\r\n","title":"Add a filter for each column in the table to the footer"},{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable.columns( '.select-filter' ).every( function () {\r\n\tvar that = this;\r\n\r\n\t// Create the select list and search operation\r\n\tvar select = $('<select />')\r\n\t\t.appendTo(\r\n\t\t\tthis.footer()\r\n\t\t)\r\n\t\t.on( 'change', function () {\r\n\t\t\tthat\r\n\t\t\t\t.search( $(this).val() )\r\n\t\t\t\t.draw();\r\n\t\t} );\r\n\r\n\t// Get the search data for the first column and add to the select list\r\n\tthis\r\n\t\t.cache( 'search' )\r\n\t\t.sort()\r\n\t\t.unique()\r\n\t\t.each( function ( d ) {\r\n\t\t\tselect.append( $('<option value=\"'+d+'\">'+d+'<\/option>') );\r\n\t\t} );\r\n} );\r\n\r\n","title":"Build a search for each column with a `select-filter` class."},{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable.columns( '.sum' ).every( function () {\r\n\tvar sum = this\r\n\t\t.data()\r\n\t\t.reduce( function (a,b) {\r\n\t\t\treturn a + b;\r\n\t\t} );\r\n\r\n\t$(el).html( 'Sum: '+sum );\r\n} );\r\n\r\n","title":"Sum all columns which have a class of `.sum` and put the sum into its footer cell"}],"since":"1.10.6","type":{"parameter":{"content":"Function to execute for every column selected. The function's content is set to be an API instance for the column in question.\r\n\r\n\t\t\tAs of DataTables 1.10.8 the function is passed the following parameters:\r\n\r\n\t\t\t1. Column index\r\n\t\t\t2. Table loop counter\r\n\t\t\t3. Column loop counter\r\n\r\n\t\t\tNo return value is expected or acted upon.","name":"fn","type":"function"},"description":"Iterate over each selected columns","returns":{"content":"DataTables API instance of the selected columns.","type":"DataTables.Api"},"type":"function","signature":"columns().every( fn )"},"group":"columns","related":[{"content":"cells().every()","type":"api"},{"content":"each()","type":"api"},{"content":"iterator()","type":"api"},{"content":"rows().every()","type":"api"}]}}
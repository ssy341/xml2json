{"dt-type":{"summary":"Selector options for cells.","description":"\r\n\r\nThe DataTables `dt-api cells()` and `dt-api cell()` methods provide the ability to select individual cells from the table. What cells are selected and how the selector actually operates is controlled by this `dt-type cell-selector` data type.\r\n\r\n### Options\r\n\r\nThe cell selector can be given in a number of different forms, to make it easy to apply to your data and use case:\r\n\r\n* No selector - Select all cells\r\n* `dt-type string` - jQuery selector\r\n* `dt-type node` - This may be one of the following:\r\n  * `-tag td` / `-tag th` cell\r\n  * Any element which has both a `data-dt-row` and `data-dt-column` attribute assigned to it, or a parent (<span class=\"since\">Since: 1.10.11<\/span>). This can be used by extensions such as FixedColumns and Responsive to allow easy column selection.\r\n* `dt-type function` - Function selector (<span class=\"since\">Since: 1.10.3<\/span>)\r\n* `dt-type jQuery` - jQuery object of cell nodes\r\n* `dt-type object` - DataTables cell indexes (`row` and `column` properties)\r\n* `dt-type array` - Array containing any combination of the above options\r\n\r\n\r\n## No selector\r\n\r\nIf no selector is given (more specifically `dt-type undefined`), then all cells are selected.\r\n\r\n###### Get the nodes for all cells in the table:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar cells = table.cells().nodes();\r\n```\r\n\r\n\r\n## string\r\n\r\nWhen the selector is given as a string, it is treated as a [jQuery selector](http://api.jquery.com/category/selectors/) that operates on the `dt-tag td` and `dt-tag th` elements in the table's `dt-tag tbody`. For full information about the options available for jQuery selectors, please refer to the [jQuery selector documentation](http://api.jquery.com/category/selectors/).\r\n\r\nNote that just like jQuery selector, is it possible to supply multiple selectors using comma separated notation (i.e. just separate by a comma) when the selector is provided as a string.\r\n\r\n###### Get data from a single cell by id:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar data = table.cell('#cell-2-42').data();\r\n```\r\n\r\n###### Select cells by class name:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar cells = table.cells('.priority');\r\n```\r\n\r\n###### Select cells by two class name selectors:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar cells = table.cells('.important, .intermediate');\r\n```\r\n\r\n\r\n## node\r\n\r\n`dt-tag td` and `dt-tag th` DOM elements can be given as a cell selector to select a cell in the DataTabels API from that DOM element. This can be useful for getting data from a cell directly, or performing other cell based operations, when you have only the DOM node for reference, for example in an event handler.\r\n\r\n###### Get the data for a cell that was clicked upon:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\n\r\n$('#example tbody').on( 'click', 'td', function () {\r\n  var cellData = table.cell( this ).data();\r\n  // ... do something with `cellData`\r\n} );\r\n```\r\n\r\n\r\n## Function\r\n\r\n< # Version requirement\r\n<\r\n< Using a function as a cell selector requires DataTables 1.10.3 or newer.\r\n\r\nFor complete control over which cells are selected, it is possible to provide a function with logic you've defined to perform the selection. That logic can be as simple or as complex as you wish, performing the selection by simply returning `true` if the cell should be included in the selected results and `false` if not.\r\n\r\nThat can be particularly useful for finding cells based on the data they contain, or based on properties of the cell node.\r\n\r\nThe function receives three parameters:\r\n\r\n1. Cell index - see `dt-api cell().index()`\r\n2. Cell data - see `dt-api cell().data()`. Note that this is the original data for the cell, not the rendered data if you are using `dt-init columns.render`\r\n3. Cell node - see `dt-api cell().node()`. Note that this may be `null` if you are using `dt-init deferRender`.\r\n\r\nThe function is called once for every cell that can be selected, based on the `dt-type selector-modifier` options, which also defines the order of the cells for the called function.\r\n\r\n###### Get the nodes for all cells that contain `1`:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\n\r\nvar ones = table\r\n\t.cells( function ( idx, data, node ) {\r\n\t\treturn data == 1 ?\r\n\t\t\ttrue : false;\r\n\t} )\r\n\t.nodes();\r\n\r\n// Add a class to the cells\r\nones.to$().addClass('highlight');\r\n```\r\n\r\n\r\n## jQuery\r\n\r\nVery similar to the above `node` type (since a jQuery object is an _array-like_ list of DOM nodes), a jQuery instance can be given as a cell selector, with any nodes which are selected by jQuery and match those available in the table's `dt-tag tbody` selected.\r\n\r\n###### Get data from cells in a jQuery instance:\r\n\r\n```js\r\nvar cells = $('td.immediate');\r\nvar table = $('#example').DataTable();\r\n\r\nvar cellData = table.cells( cells ).data();\r\n\r\n\r\n## Object\r\n\r\nSimilar to the `dt-type row-selector` and `dt-type column-selector`, `dt-type cell-selector` can also use indexes to select individual cells, but in this case an object is used which has `row` and `column` properties, each of which is set to the row and column index, respectively, for the cell to be selected.\r\n\r\nAlthough not particularly useful as a primary selector method, this can be very useful for selecting individual cells based on a `dt-api cells()` call - see the example below.\r\n\r\n###### Loop over all cells, adding a class if the data for the cell is greater than a given value.\r\n\r\n```js\r\ntable.cells().every( function () {\r\n\tif ( this.data() > 10 ) {\r\n\t\t$(this.node()).addClass( 'important' );\r\n\t}\r\n} );\r\n```\r\n\r\n\r\n## array\r\n\r\nAny combination of the above options can be given as selector together, providing a method to select multiple cells, or to mix selector types, by simply providing the selector options you want in an array.\r\n\r\n###### Get the data for two cells, based on id:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar data = table.cells( ['#cell-1-42', '#cell-1-91'] ).data();\r\n```\r\n\r\n###### Mix `cell-selector` types - id and class selector\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar data = table.cells( ['#cell-1-42', '.important'] ).data();\r\n```\r\n\r\n\t","name":"cell-selector","group":"dt"}}
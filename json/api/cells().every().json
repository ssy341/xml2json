{"dt-api":{"summary":"Iterate over each selected cell, with the function context set to be the cell in question.","description":"An often used operation with the DataTable API is to perform an operation on a collection of cells - a common action is performed on each cell, such as adding event handlers, updating data, etc. This iteration of the cells can be performed a number of ways in DataTables, each with its own advantages:\r\n\r\n\t\t* `dt-api cells().every()`\r\n\t\t* `dt-api iterator()`\r\n\t\t* `dt-api each()`\r\n\r\n\t\tThis `dt-api cells().every()` method is likely to be the most useful in the majority of cases as it sets the context of the callback function to be the `dt-api cell()` instance for the cell in question (normally a callback in the DataTables API has its context set to be at the top level API hierarchy). In simple terms this means you have the methods such as `dt-api cell().data()` available as `this.data()` in the callback given to this method.\r\n\r\n\t\tConsider the following example using `dt-api each()`, which iterates over the cell indexes that have been selected - we are required to get the `dt-api cell()` object for each cell to be able to work with it directly:\r\n\r\n\t\t```js\r\n\t\ttable.cells().eq(0).each( function ( index ) {\r\n\t\t\tvar cell = table.cell( index );\r\n\r\n\t\t\tvar data = cell.data();\r\n\t\t\t// ... do something with data(), or cell.node(), etc\r\n\t\t} );\r\n\t\t```\r\n\r\n\t\tUsing `dt-api cells().every()` this can be rewritten as:\r\n\r\n\t\t```js\r\n\t\ttable.cells().every( function () {\r\n\t\t\tvar data = this.data();\r\n\t\t\t// ... do something with data(), or this.node(), etc\r\n\t\t} );\r\n\t\t```\r\n\r\n\t\tAlthough a relatively simple optimisation in terms of code presentation, it can make the code much more readable and intuitive.\r\n\r\n\t\tThe other advantage is that the table context is automatically handled - in the first example above where `dt-api each()` is used, the `dt-api eq()` method is used to select the information from the first table in the API's context only, introducing complexity if multiple tables are used. In `dt-api cells().every()` the table context is automatically set to the appropriate table for each cell that has been selected.","name":"cells().every()","example":{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\ntable.cells().every( function () {\r\n\tif ( this.data() > 50 ) {\r\n\t\t$(this.node()).addClass( 'warning' );\r\n\t}\r\n\telse {\r\n\t\t$(this.node()).removeClass( 'warning' );\r\n\t}\r\n} );\r\n\r\n","title":"Add a class to cells which meet a logical requirement in the source data"},"since":"1.10.6","type":{"parameter":{"content":"Function to execute for every cell selected. The function's content is set to be an API instance for the cell in question.\r\n\r\n\t\t\tAs of DataTables 1.10.8 the function is passed the following parameters:\r\n\r\n\t\t\t1. Cell's row index\r\n\t\t\t2. Cell's column index\r\n\t\t\t3. Table loop counter\r\n\t\t\t4. Cell loop counter\r\n\r\n\t\t\tNo return value is expected or acted upon.","name":"fn","type":"function"},"description":"Iterate over each selected cell","returns":{"content":"DataTables API instance of the selected cells.","type":"DataTables.Api"},"type":"function","signature":"cells().every( fn )"},"group":"cells","related":[{"content":"columns().every()","type":"api"},{"content":"each()","type":"api"},{"content":"iterator()","type":"api"},{"content":"rows().every()","type":"api"}]}}
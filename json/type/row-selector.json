{"dt-type":{"summary":"Selector options for rows.","description":"\r\n\r\nThe DataTables `dt-api rows()` and `dt-api row()` (also optionally `dt-api cells()` and `dt-api cell()`) methods provide the ability to select rows from the table. What rows are selected and how the selector actually operates is controlled by this `dt-type row-selector` data type.\r\n\r\n### Options\r\n\r\nThe row selector can be given in a number of different forms, to make it easy to apply to your data and use case:\r\n\r\n* No selector - Select all rows\r\n* `dt-type integer` - Row index selector\r\n* `dt-type string` - ID selector\r\n* `dt-type string` - jQuery selector\r\n* `dt-type node` - This may be one of the following:\r\n  * `-tag tr` - table row element\r\n  * `-tag td` - table cell element (<span class=\"since\">Since: 1.10.11<\/span>)\r\n  * Any element which has a `data-dt-row` attribute assigned to it, or a parent (<span class=\"since\">Since: 1.10.11<\/span>). This can be used by extensions such as FixedColumns and Responsive to allow easy row selection.\r\n* `dt-type function` - Function selector (<span class=\"since\">Since: 1.10.3<\/span>)\r\n* `dt-type jQuery` - jQuery object of row nodes\r\n* `dt-type array` - Array containing any combination of the above options\r\n\r\n\r\n## No selector\r\n\r\nIf no selector is given (more specifically `dt-type undefined`), then all rows are selected.\r\n\r\n###### Get data for all rows in the table:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar allData = table.rows().data();\r\n```\r\n\r\n\r\n## integer\r\n\r\nDataTables stores each row internally with a row index for fast look up of row information. When the selector is given as an integer, this value represents a row index (`dt-api rows().indexes()` / `dt-api row().index()`).\r\n\r\n###### Row index 0 data:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar data = table.row( 0 ).data();\r\n```\r\n\r\n###### Find data using row indexes:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\n\r\n// Find indexes of rows which have `Yes` in the second column\r\nvar indexes = table.rows().eq( 0 ).filter( function (rowIdx) {\r\n\treturn table.cell( rowIdx, 1 ).data() === 'Yes' ? true : false;\r\n} );\r\n\r\n// Add a class to those rows using an index selector\r\ntable.rows( indexes )\r\n\t.nodes()\r\n\t.to$()\r\n\t.addClass( 'highlight' );\r\n```\r\n\r\n\r\n## string - #ID\r\n\r\nDataTables row selector is optimised for IDs as it is natural to wish to select rows by unique information. This is distinct from a jQuery selector as DataTables can optimise this selector type so as to not involve the DOM - also allowing an id row selector to operate on rows which have not yet had their DOM nodes created (when using `dt-init deferRender` for extra speed).\r\n\r\nWith dynamically sourced data, the id assigned to the row is identifier using the `dt-init rowId` option. The data used as the id can be of any value, although it must be unique in the table.\r\n\r\nTo use an id selector, simply prefix the id value for the row you wish to select with a number sign: `#`. The value that follows is taken as the id. Unlike jQuery this value does __not__ need to be escaped - although this means that an id selector must be used alone (e.g. a class name cannot also be used), it does make is much easier to use for complex data.\r\n\r\n###### Select a single row by id:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar row = table.row('#row-42');\r\n```\r\n\r\n###### Select multiple rows by id:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar rows = table.rows( [ '#row-42', '#row-51' ] );\r\n```\r\n\r\n\r\n## string\r\n\r\nWhen the selector is given as a string, it is treated as a [jQuery selector](http://api.jquery.com/category/selectors/) that operates on the `dt-tag tr` elements in the table. For full information about the options available for jQuery selectors, please refer to the [jQuery selector documentation](http://api.jquery.com/category/selectors/).\r\n\r\nNote that just like jQuery selector, is it possible to supply multiple selectors using comma separated notation (i.e. just separate by a comma) when the selector is provided as a string.\r\n\r\n###### Select rows by class name:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar rows = table.rows('.priority');\r\n```\r\n\r\n###### Select rows by two class name selectors:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar rows = table.rows('.important, .intermediate');\r\n```\r\n\r\n\r\n## node\r\n\r\n`dt-tag tr` DOM elements can be given as a row selector to select a row in the DataTabels API from that DOM element. This can be useful for getting data from a row, or performing other row based operations, when you have only the DOM node for reference, for example in an event handler.\r\n\r\n###### Get the data for a row that was clicked upon:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\n\r\n$('#example tbody').on( 'click', 'tr', function () {\r\n  var rowData = table.row( this ).data();\r\n  // ... do something with `rowData`\r\n} );\r\n```\r\n\r\n\r\n## Function\r\n\r\n< # Version requirement\r\n<\r\n< Using a function as a row selector requires DataTables 1.10.3 or newer.\r\n\r\nFor complete control over which rows are selected, it is possible to provide a function with logic you've defined to perform the selection. That logic can be as simple or as complex as you wish, performing the selection by simply returning `true` if the row should be included in the selected results and `false` if not.\r\n\r\nThat can be particularly useful for finding rows based on the data contained in the rows, or based on properties of the nodes.\r\n\r\nThe function receives three parameters:\r\n\r\n1. Row index - see `dt-api row().index()`\r\n2. Row data - see `dt-api row().data()`. Note that this is the original data object for the row, not the rendered data if you are using `dt-init columns.render`\r\n3. Row node - see `dt-api row().node()`. Note that this may be `null` if you are using `dt-init deferRender`.\r\n\r\nThe function is called once for every row that can be selected, based on the `dt-type selector-modifier` options, which also defines the order of the rows for the called function.\r\n\r\n###### Get the data all rows that have a `first_name` starting with `A`:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\n\r\nvar names = table\r\n\t.rows( function ( idx, data, node ) {\r\n\t\treturn data.first_name.charAt(0) === 'A' ?\r\n\t\t\ttrue : false;\r\n\t} )\r\n\t.data();\r\n```\r\n\r\n\r\n## jQuery\r\n\r\nVery similar to the above `node` type (since a jQuery object is an _array-like_ list of DOM nodes), a jQuery instance can be given as a row selector, with any nodes which are selected by jQuery and match those available in the table selected.\r\n\r\n###### Get data from rows in a jQuery instance:\r\n\r\n```js\r\nvar rows = $('tr.immediate');\r\nvar table = $('#example').DataTable();\r\n\r\nvar rowData = table.rows( rows ).data();\r\n```\r\n\r\n\r\n## array\r\n\r\nAny combination of the above options can be given as selector together, providing a method to select multiple rows, or to mix selector types, by simply providing the selector options you want in an array.\r\n\r\n###### Get the data for two rows, based on id:\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar data = table.rows( ['#row-42', '#row-91'] ).data();\r\n```\r\n\r\n###### Mix `row-selector` types - id and class selector\r\n\r\n```js\r\nvar table = $('#example').DataTable();\r\nvar data = table.rows( ['#row-42', '.important'] ).data();\r\n```\r\n\r\n\r\n","name":"row-selector","group":"dt"}}
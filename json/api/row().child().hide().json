{"dt-api":{"summary":"Hide child rows after creating new child rows","description":"The `dt-api row().child()` method, when used to set the child row's data, will retain the state of the child row visibility. So if the parent row's children are visible, they will continue to be so after setting use `dt-api row().child()` to set a new value. This method provides a chaining option to quickly and easily hide the child rows after setting the new child row data.\r\n\r\n\t\tPlease note that this method is only available when `dt-api row().child()` is called with a parameter set. This is because `dt-api row().child()` will return the child rows if called with no parameters, which is either a `-type jQuery` object or `-type undefined`. When called with a parameter `dt-api row().child()` returns a `-type DataTables.Api` instance. If you need to hide a child row without any parameters being set use `dt-api row().child.hide()`.\r\n\r\n\t\tIt is worth saying that this method is probably of limited use, but it is included in the API for completeness!\r\n\r\n\t\tUnlike many of the other methods which manipulate the DataTable, this method does not require `dt-api draw()` to be called for the resulting change to be displayed. The child row(s) are inserted into the table without requiring that DataTables redraw.","name":"row().child().hide()","example":{"content":"\r\nvar table = $('#example').DataTable();\r\n\r\n// Show an initial child row\r\ntable\r\n\t.row( ':eq(0)' )\r\n\t.child( 'Extra information...' )\r\n\t.show();\r\n\r\n// Change the information and hide - without the hide() call the changed\r\n// information would be visible due to the show() above.\r\ntable\r\n\t.row( ':eq(0)' )\r\n\t.child( 'Different information' )\r\n\t.hide()\r\n\r\n","title":"Hide a child row immediately after setting its value"},"since":"1.10","type":{"description":"Hide the child row(s) of a parent row","returns":{"content":"DataTables API instance.","type":"DataTables.Api"},"type":"function","signature":"row().child().hide()"},"group":"rows"}}
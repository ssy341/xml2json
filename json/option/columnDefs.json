{"dt-option":{"summary":"Set column definition initialisation properties.","description":"Very similar to `dt-init columns`, this parameter allows you to assign specific options to columns in the table, although in this case the column options defined can be applied to one or more columns. Additionally, not every column need be specified, unlike `dt-init columns`.\r\n\r\n\t\tThis parameter is an array of column definition objects, where the options available exactly match those for `dt-init columns` (see below for list of options in the related links).\r\n\r\n\t\tIn addition to the column property options, `dt-init columnDefs` requires a `targets` property to be set in each definition object (`dt-init columnDefs.targets`). This `targets` property tells DataTables which column(s) the definition should be applied to. It can be:\r\n\r\n\t\t* 0 or a positive integer - column index counting from the left\r\n\t\t* A negative integer - column index counting from the right\r\n\t\t* A string - class name will be matched on the TH for the column\r\n\t\t* The string `-string _all` - all columns (i.e. assign a default)\r\n\r\n\t\tAdditionally, `targets` can be either a single option from the list above, or an array of options (the different types can be mixed in the array if required). For example `targets: [ -1, -2 ]` would target the last and second last columns in the table.\r\n\r\n\t\t### Conflict resolution\r\n\r\n\t\tAs `dt-init columnDefs` allows columns to be defined one or more times in different column definition objects (typically to define different aspects of the columns) conflicts can arise whereby a single property might be defined with different values for the same column. Likewise, this situation could also occur when `dt-init columns` is used at the same time. DataTables uses the following rules to resolve such conflicts:\r\n\r\n\t\t1. A property defined in `dt-init columns` will _always_ take priority over any value for that property defined in `dt-init columnDefs`.\r\n\t\t2. Properties which are higher in the `dt-init columnDefs` array will take priority over those below.\r\n\r\n\t\tConsider for example the following table:\r\n\r\n\t\t```js\r\n\t\tvar table = $('#myTable').DataTable( {\r\n\t\t\tcolumnDefs: [\r\n\t\t\t\t{ targets: [0, 1], visible: true},\r\n\t\t\t\t{ targets: '_all', visible: false }\r\n\t\t\t]\r\n\t\t} );\r\n\t\t```\r\n\r\n\t\tThe first and second columns will be visible in the table while all others will be hidden.","name":"columnDefs","example":{"content":"\r\n$('#example').dataTable( {\r\n  \"columnDefs\": [ {\r\n      \"targets\": 0,\r\n      \"searchable\": false\r\n    } ]\r\n} );\r\n","title":"Disable filtering on the first column"},"since":"1.10","type":{"type":"array"},"group":"columns","related":[{"content":"columnDefs.targets","type":"option"},{"content":"columns","type":"option"},{"content":"columns.cellType","type":"option"},{"content":"columns.className","type":"option"},{"content":"columns.contentPadding","type":"option"},{"content":"columns.createdCell","type":"option"},{"content":"columns.data","type":"option"},{"content":"columns.defaultContent","type":"option"},{"content":"columns.name","type":"option"},{"content":"columns.orderable","type":"option"},{"content":"columns.orderData","type":"option"},{"content":"columns.orderDataType","type":"option"},{"content":"columns.render","type":"option"},{"content":"columns.searchable","type":"option"},{"content":"columns.title","type":"option"},{"content":"columns.type","type":"option"},{"content":"columns.visible","type":"option"},{"content":"columns.width","type":"option"},{"content":"column()","type":"api"},{"content":"columns()","type":"api"}]}}
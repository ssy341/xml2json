{"dt-type":{"summary":"DataTables API object instance","description":"\r\n\r\nThe DataTables API provides the ability to programmatically control one or more DataTable tables through the extensive array of methods that it implements. Many methods the API implements return an API instance themselves, providing the ability to [chain](http://en.wikipedia.org/wiki/Method_chaining) methods, thus allowing the API to be both compact and very expressive. As such, we define this `dt-type DataTables.Api` data type to be clear when a method provides an API instance as its return value.\r\n\r\n\r\n## API structure\r\n\r\nThe API object is _array-like_, in that it has a `length` property, elements in its result set can be access using Javascript array notation (`[]`) and it provides many (although not all) of the same methods as an `dt-type array` (for example `dt-api push()` and `dt-api indexOf()`).\r\n\r\n\r\n## Accessing the API\r\n\r\nNew API instances can be created in one of three ways:\r\n\r\n* `$( selector ).DataTable();` - DataTables constructor\r\n* `$( selector ).dataTable().api();` - DataTables jQuery constructor\r\n* `new $.fn.dataTable.Api( selector );` - Direct initialisation\r\n\r\nThe result from each is an instance of the DataTables API object which has the tables found by the selector in its context. In all three cases `selector` is a [jQuery selector](http://api.jquery.com/category/selectors/).\r\n\r\nIt is important to note the difference between `$( selector ).DataTable()` and `$( selector ).dataTable()`. The former returns a DataTables API instance, while the latter returns a `dt-type jQuery` object. An `api()` method is added to the jQuery object so you can easily access the API, but the jQuery object can be useful for manipulating the table node, as you would with any other jQuery instance (such as using `addClass()` etc).\r\n\r\n###### $( selector ).DataTable(); example\r\n\r\n```js\r\nvar table = $('#myTable').DataTable();\r\n\r\n// Search for a data point\r\ntable.search( 'Fiona' ).draw();\r\n```\r\n\r\n\r\n###### $( selector ).dataTable(); example\r\n\r\n```js\r\nvar table = $('#myTable').dataTable().api();\r\n\r\n// Jump to the next page of data\r\ntable.page('next').draw(false);\r\n```\r\n\r\n\r\n###### new $.fn.dataTable.Api( selector );\r\n\r\n```js\r\nvar table = new $.fn.dataTable.Api( '#myTable' );\r\n\r\n// Get data from the first row\r\nvar data = table.rows().data()[0]; // same as row(0).data()\r\n```\r\n\r\n\r\n## Further information\r\n\r\nUse the following resources to explore the DataTables API further:\r\n\r\n* [API manual](/manual/api) - detailed usage and explanation of the API terminology\r\n* [API reference](/reference/api) - list of all API methods available\r\n* [API plug-ins](/plug-ins/api) - community provided plug-ins to extend the API's capabilities\r\n\r\n\t","name":"DataTables.Api","group":"dt"}}
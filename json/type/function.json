{"dt-type":{"summary":"Javascript `Function`","description":"\r\n\r\nFunctions are a key component of any programming language, particularly in Javascript which treats functions as first class objects. Functions are created using the construct `function () {}`, `function name () {}` or `new Function()`.\r\n\r\nA detailed description of the `Function` type is available on the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function).\r\n\r\n\r\n## Use in DataTables\r\n\r\nWhere a parameter is shown as accepting a function type, or a method returning a function type, it indicates that a function can be passed in (be it as a function assigned to a variable, or an anonymous function) / returned.\r\n\r\nFunctions in DataTables are frequently used for callbacks. For example, using an anonymous function which is executed whenever DataTables performs a draw action (`dt-init drawCallback`):\r\n\r\n```js\r\n$('#example').DataTable( {\r\n\tdrawCallback: function () {\r\n\t\tconsole.log( 'Table redrawn '+new Date() );\r\n\t}\r\n} );\r\n```\r\n\r\nSame example assigning the function to a variable:\r\n\r\n```js\r\nvar draw = function () {\r\n\tconsole.log( 'Table redrawn '+new Date() );\r\n};\r\n\r\n$('#example').DataTable( {\r\n\tdrawCallback: draw\r\n} );\r\n```\r\n\r\nAnd finally, the same example using a named function:\r\n\r\n```js\r\nfunction draw () {\r\n\tconsole.log( 'Table redrawn '+new Date() );\r\n};\r\n\r\n$('#example').DataTable( {\r\n\tdrawCallback: draw\r\n} );\r\n```\r\n\r\n\t","name":"function","group":"js"}}